import parser::*;

Analyzer :: struct {
  current_scope: *mut Scope,
}

impl Analyzer {
  visit_program :: fn(*mut self, mut program: Program) {
    self.current_scope = &mut program.scope;
    for function in program.functions {
      self.visit_function(function);
    }
    self.current_scope = null;
  }
  
  visit_function :: fn(*mut self, function: Function) {
    mut block_scope := function.block.scope;
    for parameter in function.parameters {
      block_scope.insert(parameter, None());
    }
    self.visit_block(function.block);
  }

  visit_block :: fn(*mut self, mut block: Block) {  
    old_scope := self.current_scope;
    block.scope.parent = Some(self.current_scope);
    self.current_scope = &mut block.scope;
    for statement in block.statements {
      self.visit_statement(statement);
    }
    self.current_scope = old_scope;
  }

  visit_literal :: fn(*mut self, literal: s64) -> BType => BType::Integer;  

  visit_identifier :: fn(*mut self, identifier: InternedString) -> BType {
    variable : Option!<*mut Variable> = self.current_scope.get(identifier);
    if (variable.is_none()) {
      fmt::printlnf("use of undeclared identifier %", (identifier,));
      exit(1);
      return -1;
    } else {
      return variable.unwrap().type;
    }
  }

  visit_unary :: fn(*mut self, operand: *mut Expression, operator: TType) -> BType {
    // Now we don't have * and & unaries, so this will never change type.
    operand_ty := self.visit_expression(operand);
    return operand_ty;
  }

  // I think this will always be integer. not sure.
  visit_binary :: fn(*mut self, left: *mut Expression, right: *mut Expression, operator: TType) -> BType {
    left_ty := self.visit_expression(left);
    right_ty := self.visit_expression(right);

    if (operator == TType::Assign) {
      if left is Expression::Identifier(identifier) {
        self.current_scope.get(identifier).unwrap().type = right_ty;
      }
    }

    return left_ty;
  } 

  visit_call :: fn(*mut self, callee: InternedString, args: List!<*mut Expression>) -> BType {
    callee_variable := self.current_scope.get(callee).unwrap();

    if callee_variable.type != BType::Function {
      callee_variable.type = BType::Function;
    }

    mut arg_types: List!<BType> = .{};
    mut return_type: BType;

    for arg in args {
      arg_types.push(self.visit_expression(arg));
    }

    // We don't have a return keyword yet.
    return_type = BType::Integer;
    callee_variable.inferred_function_signature = Some((arg_types, return_type));
    return return_type;
  } 

  visit_if :: fn(*mut self, condition: *mut Expression, block: Block) {}
  visit_extrn :: fn(*mut self, identifier: InternedString) {}
  visit_auto :: fn(*mut self, identifier: InternedString) {}

  visit_statement :: fn(*mut self, statement: *mut Statement) {
    switch is statement {
      Statement::Extrn(identifier): { self.visit_extrn(identifier); }
      Statement::Auto(identifier): { self.visit_auto(identifier); }
      Statement::Expression(expression): { self.visit_expression(expression); }
      Statement::If(condition, block): { self.visit_if(condition, block); }
      else: { panic("Unhandled statement type"); }
    }
  }

  visit_expression :: fn(*mut self, expression: *mut Expression) -> BType {
    switch is expression {
      Expression::Literal(integer) => BType::Integer,
      Expression::Identifier(identifier) => self.visit_identifier(identifier),
      Expression::Unary(operand, operator) => self.visit_unary(operand, operator),
      Expression::Binary(left, right, operator) => self.visit_binary(left, right, operator),
      Expression::Call(callee, args) => self.visit_call(callee, args),
      else: { 
        panic("Unhandled expression type");
      }
    }
    return BType::Integer;
  }
}